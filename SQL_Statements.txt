一、基本语句
1.SELECT 语句用于从数据库中选取数据
	1)SELECT name,country FROM Websites; 2)SELECT * FROM Websites;

2.SELECT DISTINCT 语句用于返回唯一不同的值
	SELECT DISTINCT country FROM Websites;

3.WHERE 子句用于过滤记录
	SELECT * FROM Websites WHERE country='CN';#数字不用引号

4.AND & OR 运算符用于基于一个以上的条件对记录进行过滤
	SELECT * FROM Websites
	WHERE country='CN' #可以为OR
	AND alexa > 50;

5.ORDER BY 关键字用于对结果集按照一个列或者多个列进行排序
	1)SELECT * FROM Websites
	   ORDER BY alexa; #默认升序
	2)SELECT * FROM Websites
	   ORDER BY alexa DESC; #降序
	3)SELECT * FROM Websites
	   ORDER BY country,alexa; #多重选择

6.INSERT INTO 语句用于向表中插入新记录
	INSERT INTO Websites (name, url, alexa, country) #如果数据不全，会自动补充默认值 eg. 0
	VALUES ('百度','https://www.baidu.com/','4','CN');

7.UPDATE 语句用于更新表中已存在的记录
	UPDATE Websites 
	SET alexa='5000', country='USA' 
	WHERE name='菜鸟教程'; #!没有where的话会更新全部数据

8.DELETE 语句用于删除表中的行
	DELETE FROM Websites
	WHERE name='Facebook' AND country='USA';

9.AS 主要用于为列、表或子查询结果指定别名(alias)。
	SELECT COUNT(*) AS total_count, 
		    AVG(price) AS average_price
	FROM products;
二、基本函数
1.SQL Aggregate 函数：SQL Aggregate 函数计算从列中取得的值，返回一个单一的值。

	AVG() - 返回平均值
		SELECT AVG(column_name) FROM table_name

	COUNT() - 返回行数
		1)SELECT COUNT(column_name) FROM table_name;
		2)SELECT COUNT(*) FROM table_name; #总记录数
		3)SELECT COUNT(DISTINCT column_name) FROM table_name;

	FIRST() - 返回第一个记录的值
		1)SELECT FIRST(column_name) FROM table_name;
		2)SELECT column_name FROM table_name #MySQL中
		ORDER BY column_name ASC
		LIMIT 1;

	LAST() - 返回最后一个记录的值
		1)SELECT LAST(column_name) FROM table_name; #MySQL中
		2)SELECT column_name FROM table_name
		ORDER BY column_name DESC
		LIMIT 1;

	MAX() - 返回最大值
		SELECT MAX(column_name) FROM table_name;

	MIN() - 返回最小值
		SELECT MIN(column_name) FROM table_name;

	SUM() - 返回总和
		SELECT SUM(column_name) FROM table_name;

2.SQL Scalar 函数：SQL Scalar 函数基于输入值，返回一个单一的值。

	UCASE() - 将某个字段转换为大写
		SELECT UCASE(column_name) FROM table_name;

	LCASE() - 将某个字段转换为小写
		SELECT LCASE(column_name) FROM table_name;

	MID() - 从某个文本字段提取字符
		SELECT MID(column_name[,start,length]) FROM table_name;
		举例：
		SELECT MID(name,1,4) AS ShortTitle
		FROM Websites;

	SubString(字段，1，end) - 从某个文本字段提取字符 #类似于mid,可能在别的语言中
	LEN() - 返回某个文本字段的长度
		SELECT LEN(column_name) FROM table_name; #mysql为LENGTH
		例子：
		SELECT name, LENGTH(url) as LengthOfURL
		FROM Websites;

	ROUND() - 对某个数值字段进行指定小数位数的四舍五入
		SELECT ROUND(column_name,decimals) FROM TABLE_NAME; #decimals位数

	NOW() - 返回当前的系统日期和时间
		SELECT NOW() FROM table_name;
		例子：
		SELECT name, url, Now() AS date
		FROM Websites;

	FORMAT() - 格式化某个字段的显示方式
		SELECT FORMAT(column_name,format) 
		FROM table_name;
		例子：
		SELECT name, url, DATE_FORMAT(Now(),'%Y-%m-%d') AS date
		FROM Websites;
3. 其他的函数

	SQL GROUP BY 语句：用于结合聚合函数，根据一个或多个列对结果集进行分组。#对一个表中的一个列操作
		SELECT column_name, aggregate_function(column_name)
		FROM table_name
		WHERE column_name operator value #分组前的筛选
		GROUP BY column_name;
		举例：
		1)SELECT site_id, SUM(access_log.count) AS nums
		FROM access_log GROUP BY site_id;
		2)多表连接

	SQL HAVING 子句：HAVING 子句可以让我们筛选分组后的各组数据 #where在group by前， having在group by 之后
		SELECT column1, aggregate_function(column2)
		FROM table_name
		GROUP BY column1
		HAVING condition;  #分组后的筛选
		举例：
		1)2个表，找出访问量大于200的网站

	SQL EXISTS 运算符：用于判断查询子句是否有记录，如果有一条或多条记录存在返回 True，否则返回 False。
		SELECT column_name(s)
		FROM table_name
		WHERE EXISTS (SELECT column_name FROM table_name WHERE condition);
		例子：
		1）查找总访问量(count 字段)大于 200 的网站是否存在
		SELECT Websites.name, Websites.url 
		FROM Websites 
		WHERE EXISTS (SELECT count FROM access_log WHERE Websites.id = access_log.site_id AND count > 200);
		
		
三、进阶语句

	SQL SELECT TOP, LIMIT, ROWNUM 子句：用于在 SQL 中限制返回的结果集中的行数
		mySQL中：
		SELECT column1, column2, ...
		FROM table_name
		LIMIT number;
	
	SQL LIKE 操作符
		SELECT column1, column2, ...
		FROM table_name
		WHERE column_name LIKE pattern; #  %：匹配任意字符（包括零个字符）, _：匹配单个字符。(下划线，显示不出来)
		例子：1）使用 % 通配符找出所有以 "iPhone" 开头的产品：
		SELECT ProductName, Category
		FROM Products
		WHERE ProductName LIKE 'iPhone%';
		2）下面的 SQL 语句选取 name 包含模式 "oo" 的所有客户：
		SELECT * FROM Websites
		WHERE name LIKE '%oo%';
	
	SQL 通配符：配合LIKE
		%：替代 0 个或多个字符
		_ ：替代一个字符(下划)
		[charlist]：字符列中的任何单一字符
		[^charlist] 或 [!charlist]：不在字符列中的任何单一字符
		例子：
		下面的 SQL 语句选取 name 以 "G"、"F" 或 "s" 开始的所有网站：
		SELECT * FROM Websites
		WHERE name REGEXP '^[GFs]';
		下面的 SQL 语句选取 name 不以 A 到 H 字母开头的网站：
		SELECT * FROM Websites
		WHERE name REGEXP '^[^A-H]';

	SQL IN 操作符：允许您在 WHERE 子句中规定多个值。(拓展where)
		SELECT column1, column2, ...
		FROM table_name
		WHERE column IN (value1, value2, ...);
		例子：
		SELECT * FROM Websites
		WHERE name IN ('Google','菜鸟教程'); #之前只能选一个，现在是多个

	SQL BETWEEN 操作符：选取介于两个值之间的数据范围内的值，这些值可以是数值、文本或者日期。
		SELECT column1, column2, ...
		FROM table_name
		WHERE column BETWEEN value1 AND value2;
		举例：
		面的 SQL 语句选取 name 以介于 'A' 和 'H' 之间字母开始的所有网站：
		SELECT * FROM Websites
		WHERE name BETWEEN 'A' AND 'H';

	SQL 连接(JOIN)：不同的连接方法在表中会出现NULL
		SELECT column1, column2, ...
		FROM table1
		JOIN table2 ON condition;
		例子：这个没有空值
		SELECT Websites.id, Websites.name, access_log.count, access_log.date
		FROM Websites
		INNER JOIN access_log
		ON Websites.id=access_log.site_id;
		记住这几个就行，注意没有的就是NULL
		INNER JOIN：如果表中有至少一个匹配，则返回行
		LEFT JOIN：即使右表中没有匹配，也从左表返回所有的行
		RIGHT JOIN：即使左表中没有匹配，也从右表返回所有的行
		FULL JOIN：只要其中一个表中存在匹配，则返回行

	SQL UNION 操作符：合并两个或多个 SELECT 语句的结果集，相同数量的列，类似表的并集
		SELECT column1, column2, ...
		FROM table1
		UNION
		SELECT column1, column2, ...
		FROM table2;
		
	SQL UNION ALL：所有的（也有重复的值），类似表的并集加补集
		SELECT column1, column2, ...
		FROM table1
		UNION ALL
		SELECT column1, column2, ...
		FROM table2;
		
	SQL SELECT INTO 语句：从一个表复制数据，然后把数据插入到另一个新表中。
		SELECT *
		INTO employees_backup #新的
		FROM employees;
		MySQL 数据库不支持 SELECT ... INTO 语句，但支持 INSERT INTO ... SELECT，可以用：
		CREATE TABLE 新表
		AS
		SELECT * FROM 旧表 
		例子：
		CREATE TABLE employees_backup AS
		SELECT EmployeeID, FirstName, LastName, Age, Department
		FROM employees
		WHERE Age > 25;

	SQL INSERT INTO SELECT 语句：从一个表复制数据，然后把数据插入到一个已存在的表中。(插入列)
		INSERT INTO table2
		SELECT * FROM table1;
		或者：指定插入的列
		INSERT INTO table2			
		(column_name(s))
		SELECT column_name(s)
		FROM table1;
		例子：
		INSERT INTO Websites (name, country)
		SELECT app_name, country FROM apps;

	DDL:
	
	SQL CREATE DATABASE 语句：用于创建数据库
		CREATE DATABASE dbname;
	
	SQL CREATE TABLE 语句
		CREATE TABLE table_name
		(
		column_name1 data_type(size), #int, varchar，
		column_name2 data_type(size),
		column_name3 data_type(size),
		....
		);
		

	SQL 约束（Constraints）：用于规定表中的数据规则。
		1. NOT NULL：确保列不能有 NULL 值。
		2. UNIQUE：确保列中的所有值都是唯一的。
		3. PRIMARY KEY：唯一标识表中的每一行记录。PRIMARY KEY 约束是 NOT NULL 和 UNIQUE 的结合。
		4. FOREIGN KEY：确保一个表中的值匹配另一个表中的值，从而建立两表之间的关系。
		5. CHECK：确保列中的值满足特定的条件。
		6. DEFAULT：为列设置默认值。
		7. INDEX：用于快速访问数据库表中的数据。
		例子：
		CREATE TABLE Students (
    			StudentID INT NOT NULL PRIMARY KEY,
    			LastName VARCHAR(50) NOT NULL,
    			FirstName VARCHAR(50) NOT NULL,
    			Age INT CHECK (Age >= 18),
    			Email VARCHAR(100) UNIQUE,
    			EnrollmentDate DATE DEFAULT GETDATE()#插入默认当前日期
		);
		MySQL：
		CREATE TABLE Persons (
    			P_Id INT NOT NULL,
    			LastName VARCHAR(255) NOT NULL,
    			FirstName VARCHAR(255),
    			UNIQUE (P_Id) 或者 PRIMARY KEY (P_Id) 或者CHECK (P_Id>0)
		);
		MySQL：在 "Orders" 表创建时在 "P_Id" 列上创建 FOREIGN KEY 约束：指向"Persons" 表的PRIMARY：(P_Id)
			CREATE TABLE Orders
			(
			O_Id int NOT NULL,
			OrderNo int NOT NULL,
			P_Id int,
			PRIMARY KEY (O_Id),
			FOREIGN KEY (P_Id) REFERENCES Persons(P_Id)
			)
		INDEX例子:
			CREATE (UNIQUE) INDEX index_name
			ON table_name (column_name,column_name...)

	SQL 撤销索引、撤销表以及撤销数据库：
		index:
		DROP INDEX [IF EXISTS] index_name
		ON TABLE_NAME;
		table:
		DROP TABLE [IF EXISTS] TABLE_NAME;
		database:
		DROP DATABASE [IF EXISTS] database_name;
	
	TRUNCATE TABLE 语句：仅仅需要删除表内的数据，但并不删除表本身
		TRUNCATE TABLE TABLE_NAME;

	SQL ALTER TABLE 语句：用于在已有的表中添加、删除或修改列。
		在表中添加列:
		ALTER TABLE table_name
		ADD column_name datatype
		DROP COLUMN column_name
		语言My SQL / Oracle：
		ALTER TABLE table_name
		MODIFY COLUMN column_name datatype

	SQL AUTO INCREMENT 字段：在每次插入新记录时，自动地创建主键字段的值。
		ALTER TABLE Persons AUTO_INCREMENT=100
		INSERT INTO Persons (FirstName,LastName)
		VALUES ('Lars','Monsen')

	SQL 视图（Views）：视图是可视化的表。(基于查询的虚拟表)
		CREATE VIEW view_name AS
		SELECT column1, column2, ...
		FROM table_name
		WHERE condition;
		更新：
		先更新表，在查询
		删除
		DROP VIEW [IF EXISTS] view_name;
	
	SQL Date 函数，SQL NULL 值，SQL NULL 函数，SQL 通用数据类型，SQL 用于各种数据库的数据类型
		